// Code generated by protoc-gen-go.
// source: hospital.proto
// DO NOT EDIT!

/*
Package hospital is a generated protocol buffer package.

It is generated from these files:
	hospital.proto

It has these top-level messages:
	BasicRequest
	BasicResponse
	Person
	Patient
	Patients
	Doctor
	Doctors
	Technican
	Technicans
	MedicalTest
	MedicalTests
	FilterByIdRequest
	AddTestRequest
*/
package hospital

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BasicRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *BasicRequest) Reset()                    { *m = BasicRequest{} }
func (m *BasicRequest) String() string            { return proto.CompactTextString(m) }
func (*BasicRequest) ProtoMessage()               {}
func (*BasicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BasicRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type BasicResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *BasicResponse) Reset()                    { *m = BasicResponse{} }
func (m *BasicResponse) String() string            { return proto.CompactTextString(m) }
func (*BasicResponse) ProtoMessage()               {}
func (*BasicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BasicResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Person struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Person) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Person) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type Patient struct {
	Identity *Person `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
}

func (m *Patient) Reset()                    { *m = Patient{} }
func (m *Patient) String() string            { return proto.CompactTextString(m) }
func (*Patient) ProtoMessage()               {}
func (*Patient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Patient) GetIdentity() *Person {
	if m != nil {
		return m.Identity
	}
	return nil
}

type Patients struct {
	Patients []*Patient `protobuf:"bytes,1,rep,name=patients" json:"patients,omitempty"`
}

func (m *Patients) Reset()                    { *m = Patients{} }
func (m *Patients) String() string            { return proto.CompactTextString(m) }
func (*Patients) ProtoMessage()               {}
func (*Patients) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Patients) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

type Doctor struct {
	Identity *Person `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
}

func (m *Doctor) Reset()                    { *m = Doctor{} }
func (m *Doctor) String() string            { return proto.CompactTextString(m) }
func (*Doctor) ProtoMessage()               {}
func (*Doctor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Doctor) GetIdentity() *Person {
	if m != nil {
		return m.Identity
	}
	return nil
}

type Doctors struct {
	Doctors []*Doctor `protobuf:"bytes,1,rep,name=doctors" json:"doctors,omitempty"`
}

func (m *Doctors) Reset()                    { *m = Doctors{} }
func (m *Doctors) String() string            { return proto.CompactTextString(m) }
func (*Doctors) ProtoMessage()               {}
func (*Doctors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Doctors) GetDoctors() []*Doctor {
	if m != nil {
		return m.Doctors
	}
	return nil
}

type Technican struct {
	Identity *Person `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
}

func (m *Technican) Reset()                    { *m = Technican{} }
func (m *Technican) String() string            { return proto.CompactTextString(m) }
func (*Technican) ProtoMessage()               {}
func (*Technican) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Technican) GetIdentity() *Person {
	if m != nil {
		return m.Identity
	}
	return nil
}

type Technicans struct {
	Technicans []*Technican `protobuf:"bytes,1,rep,name=technicans" json:"technicans,omitempty"`
}

func (m *Technicans) Reset()                    { *m = Technicans{} }
func (m *Technicans) String() string            { return proto.CompactTextString(m) }
func (*Technicans) ProtoMessage()               {}
func (*Technicans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Technicans) GetTechnicans() []*Technican {
	if m != nil {
		return m.Technicans
	}
	return nil
}

type MedicalTest struct {
	Id        int64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Patient   *Patient           `protobuf:"bytes,2,opt,name=patient" json:"patient,omitempty"`
	Doctor    *Doctor            `protobuf:"bytes,3,opt,name=doctor" json:"doctor,omitempty"`
	Technican *Technican         `protobuf:"bytes,4,opt,name=technican" json:"technican,omitempty"`
	Results   map[string]float64 `protobuf:"bytes,5,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *MedicalTest) Reset()                    { *m = MedicalTest{} }
func (m *MedicalTest) String() string            { return proto.CompactTextString(m) }
func (*MedicalTest) ProtoMessage()               {}
func (*MedicalTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MedicalTest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MedicalTest) GetPatient() *Patient {
	if m != nil {
		return m.Patient
	}
	return nil
}

func (m *MedicalTest) GetDoctor() *Doctor {
	if m != nil {
		return m.Doctor
	}
	return nil
}

func (m *MedicalTest) GetTechnican() *Technican {
	if m != nil {
		return m.Technican
	}
	return nil
}

func (m *MedicalTest) GetResults() map[string]float64 {
	if m != nil {
		return m.Results
	}
	return nil
}

type MedicalTests struct {
	Tests []*MedicalTest `protobuf:"bytes,1,rep,name=tests" json:"tests,omitempty"`
}

func (m *MedicalTests) Reset()                    { *m = MedicalTests{} }
func (m *MedicalTests) String() string            { return proto.CompactTextString(m) }
func (*MedicalTests) ProtoMessage()               {}
func (*MedicalTests) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MedicalTests) GetTests() []*MedicalTest {
	if m != nil {
		return m.Tests
	}
	return nil
}

type FilterByIdRequest struct {
	Id       int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FilterId int64 `protobuf:"varint,2,opt,name=filterId" json:"filterId,omitempty"`
}

func (m *FilterByIdRequest) Reset()                    { *m = FilterByIdRequest{} }
func (m *FilterByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterByIdRequest) ProtoMessage()               {}
func (*FilterByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FilterByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FilterByIdRequest) GetFilterId() int64 {
	if m != nil {
		return m.FilterId
	}
	return 0
}

type AddTestRequest struct {
	Doctor    int64              `protobuf:"varint,1,opt,name=doctor" json:"doctor,omitempty"`
	Patient   int64              `protobuf:"varint,2,opt,name=patient" json:"patient,omitempty"`
	Technican int64              `protobuf:"varint,3,opt,name=technican" json:"technican,omitempty"`
	Results   map[string]float64 `protobuf:"bytes,4,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *AddTestRequest) Reset()                    { *m = AddTestRequest{} }
func (m *AddTestRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTestRequest) ProtoMessage()               {}
func (*AddTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AddTestRequest) GetDoctor() int64 {
	if m != nil {
		return m.Doctor
	}
	return 0
}

func (m *AddTestRequest) GetPatient() int64 {
	if m != nil {
		return m.Patient
	}
	return 0
}

func (m *AddTestRequest) GetTechnican() int64 {
	if m != nil {
		return m.Technican
	}
	return 0
}

func (m *AddTestRequest) GetResults() map[string]float64 {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicRequest)(nil), "BasicRequest")
	proto.RegisterType((*BasicResponse)(nil), "BasicResponse")
	proto.RegisterType((*Person)(nil), "Person")
	proto.RegisterType((*Patient)(nil), "Patient")
	proto.RegisterType((*Patients)(nil), "Patients")
	proto.RegisterType((*Doctor)(nil), "Doctor")
	proto.RegisterType((*Doctors)(nil), "Doctors")
	proto.RegisterType((*Technican)(nil), "Technican")
	proto.RegisterType((*Technicans)(nil), "Technicans")
	proto.RegisterType((*MedicalTest)(nil), "MedicalTest")
	proto.RegisterType((*MedicalTests)(nil), "MedicalTests")
	proto.RegisterType((*FilterByIdRequest)(nil), "FilterByIdRequest")
	proto.RegisterType((*AddTestRequest)(nil), "AddTestRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PatientService service

type PatientServiceClient interface {
	RequestAllResults(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (PatientService_RequestAllResultsClient, error)
	RequestPersonalData(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Patient, error)
}

type patientServiceClient struct {
	cc *grpc.ClientConn
}

func NewPatientServiceClient(cc *grpc.ClientConn) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) RequestAllResults(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (PatientService_RequestAllResultsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PatientService_serviceDesc.Streams[0], c.cc, "/PatientService/RequestAllResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &patientServiceRequestAllResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PatientService_RequestAllResultsClient interface {
	Recv() (*MedicalTests, error)
	grpc.ClientStream
}

type patientServiceRequestAllResultsClient struct {
	grpc.ClientStream
}

func (x *patientServiceRequestAllResultsClient) Recv() (*MedicalTests, error) {
	m := new(MedicalTests)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *patientServiceClient) RequestPersonalData(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := grpc.Invoke(ctx, "/PatientService/RequestPersonalData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PatientService service

type PatientServiceServer interface {
	RequestAllResults(*BasicRequest, PatientService_RequestAllResultsServer) error
	RequestPersonalData(context.Context, *BasicRequest) (*Patient, error)
}

func RegisterPatientServiceServer(s *grpc.Server, srv PatientServiceServer) {
	s.RegisterService(&_PatientService_serviceDesc, srv)
}

func _PatientService_RequestAllResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BasicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PatientServiceServer).RequestAllResults(m, &patientServiceRequestAllResultsServer{stream})
}

type PatientService_RequestAllResultsServer interface {
	Send(*MedicalTests) error
	grpc.ServerStream
}

type patientServiceRequestAllResultsServer struct {
	grpc.ServerStream
}

func (x *patientServiceRequestAllResultsServer) Send(m *MedicalTests) error {
	return x.ServerStream.SendMsg(m)
}

func _PatientService_RequestPersonalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).RequestPersonalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/RequestPersonalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).RequestPersonalData(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PatientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPersonalData",
			Handler:    _PatientService_RequestPersonalData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestAllResults",
			Handler:       _PatientService_RequestAllResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hospital.proto",
}

// Client API for DoctorService service

type DoctorServiceClient interface {
	RequestAllPatients(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Patients, error)
	RequestPatientsForDoctor(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Patients, error)
	RequestResultsWithId(ctx context.Context, in *FilterByIdRequest, opts ...grpc.CallOption) (*MedicalTest, error)
}

type doctorServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorServiceClient(cc *grpc.ClientConn) DoctorServiceClient {
	return &doctorServiceClient{cc}
}

func (c *doctorServiceClient) RequestAllPatients(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Patients, error) {
	out := new(Patients)
	err := grpc.Invoke(ctx, "/DoctorService/RequestAllPatients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) RequestPatientsForDoctor(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Patients, error) {
	out := new(Patients)
	err := grpc.Invoke(ctx, "/DoctorService/RequestPatientsForDoctor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) RequestResultsWithId(ctx context.Context, in *FilterByIdRequest, opts ...grpc.CallOption) (*MedicalTest, error) {
	out := new(MedicalTest)
	err := grpc.Invoke(ctx, "/DoctorService/RequestResultsWithId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DoctorService service

type DoctorServiceServer interface {
	RequestAllPatients(context.Context, *BasicRequest) (*Patients, error)
	RequestPatientsForDoctor(context.Context, *BasicRequest) (*Patients, error)
	RequestResultsWithId(context.Context, *FilterByIdRequest) (*MedicalTest, error)
}

func RegisterDoctorServiceServer(s *grpc.Server, srv DoctorServiceServer) {
	s.RegisterService(&_DoctorService_serviceDesc, srv)
}

func _DoctorService_RequestAllPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).RequestAllPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DoctorService/RequestAllPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).RequestAllPatients(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_RequestPatientsForDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).RequestPatientsForDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DoctorService/RequestPatientsForDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).RequestPatientsForDoctor(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_RequestResultsWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).RequestResultsWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DoctorService/RequestResultsWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).RequestResultsWithId(ctx, req.(*FilterByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DoctorService",
	HandlerType: (*DoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAllPatients",
			Handler:    _DoctorService_RequestAllPatients_Handler,
		},
		{
			MethodName: "RequestPatientsForDoctor",
			Handler:    _DoctorService_RequestPatientsForDoctor_Handler,
		},
		{
			MethodName: "RequestResultsWithId",
			Handler:    _DoctorService_RequestResultsWithId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}

// Client API for TechnicanService service

type TechnicanServiceClient interface {
	AddResults(ctx context.Context, in *AddTestRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	RequestAllResultsForTechnican(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*MedicalTests, error)
}

type technicanServiceClient struct {
	cc *grpc.ClientConn
}

func NewTechnicanServiceClient(cc *grpc.ClientConn) TechnicanServiceClient {
	return &technicanServiceClient{cc}
}

func (c *technicanServiceClient) AddResults(ctx context.Context, in *AddTestRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/TechnicanService/AddResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technicanServiceClient) RequestAllResultsForTechnican(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*MedicalTests, error) {
	out := new(MedicalTests)
	err := grpc.Invoke(ctx, "/TechnicanService/RequestAllResultsForTechnican", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TechnicanService service

type TechnicanServiceServer interface {
	AddResults(context.Context, *AddTestRequest) (*BasicResponse, error)
	RequestAllResultsForTechnican(context.Context, *BasicRequest) (*MedicalTests, error)
}

func RegisterTechnicanServiceServer(s *grpc.Server, srv TechnicanServiceServer) {
	s.RegisterService(&_TechnicanService_serviceDesc, srv)
}

func _TechnicanService_AddResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicanServiceServer).AddResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TechnicanService/AddResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicanServiceServer).AddResults(ctx, req.(*AddTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechnicanService_RequestAllResultsForTechnican_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicanServiceServer).RequestAllResultsForTechnican(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TechnicanService/RequestAllResultsForTechnican",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicanServiceServer).RequestAllResultsForTechnican(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TechnicanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TechnicanService",
	HandlerType: (*TechnicanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResults",
			Handler:    _TechnicanService_AddResults_Handler,
		},
		{
			MethodName: "RequestAllResultsForTechnican",
			Handler:    _TechnicanService_RequestAllResultsForTechnican_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}

// Client API for PublicService service

type PublicServiceClient interface {
	ListDoctors(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Doctors, error)
	ListTechnicans(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Technicans, error)
}

type publicServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublicServiceClient(cc *grpc.ClientConn) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) ListDoctors(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Doctors, error) {
	out := new(Doctors)
	err := grpc.Invoke(ctx, "/PublicService/ListDoctors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) ListTechnicans(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*Technicans, error) {
	out := new(Technicans)
	err := grpc.Invoke(ctx, "/PublicService/ListTechnicans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublicService service

type PublicServiceServer interface {
	ListDoctors(context.Context, *BasicRequest) (*Doctors, error)
	ListTechnicans(context.Context, *BasicRequest) (*Technicans, error)
}

func RegisterPublicServiceServer(s *grpc.Server, srv PublicServiceServer) {
	s.RegisterService(&_PublicService_serviceDesc, srv)
}

func _PublicService_ListDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ListDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublicService/ListDoctors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ListDoctors(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_ListTechnicans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ListTechnicans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublicService/ListTechnicans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ListTechnicans(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDoctors",
			Handler:    _PublicService_ListDoctors_Handler,
		},
		{
			MethodName: "ListTechnicans",
			Handler:    _PublicService_ListTechnicans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}

func init() { proto.RegisterFile("hospital.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0xb6, 0x63, 0x88, 0x93, 0xc9, 0xcf, 0x81, 0x39, 0x08, 0xf9, 0xe4, 0x40, 0x4b, 0xb7, 0x95,
	0x1a, 0x55, 0xed, 0x36, 0x32, 0x2a, 0x42, 0xdc, 0x20, 0x10, 0x45, 0x42, 0x6a, 0x2b, 0xe4, 0x22,
	0xf5, 0xb2, 0x5a, 0xec, 0x45, 0xac, 0x6a, 0xec, 0xd4, 0xbb, 0x41, 0xca, 0x7d, 0x5f, 0xa9, 0x6f,
	0xd2, 0xd7, 0xa9, 0x54, 0x65, 0xbd, 0x76, 0x36, 0xa1, 0x3f, 0x5c, 0xf4, 0xce, 0x3b, 0xdf, 0xcc,
	0x7c, 0xb3, 0xdf, 0xce, 0x8c, 0xa1, 0x7f, 0x9d, 0xcb, 0xb1, 0x50, 0x2c, 0xa5, 0xe3, 0x22, 0x57,
	0x39, 0x79, 0x00, 0xdd, 0x63, 0x26, 0x45, 0x1c, 0xf1, 0xcf, 0x13, 0x2e, 0x15, 0xf6, 0xa1, 0x21,
	0x92, 0xc0, 0xdd, 0x71, 0x87, 0x5e, 0xd4, 0x10, 0x09, 0x79, 0x0a, 0x3d, 0x83, 0xcb, 0x71, 0x9e,
	0x49, 0x8e, 0x9b, 0xd0, 0x94, 0x8a, 0xa9, 0x89, 0xd4, 0x4e, 0xed, 0xc8, 0x9c, 0xc8, 0x05, 0x34,
	0xcf, 0x79, 0x21, 0xf3, 0x6c, 0x39, 0x05, 0x6e, 0x03, 0x5c, 0x89, 0x42, 0xaa, 0x8f, 0x19, 0xbb,
	0xe1, 0x41, 0x43, 0x47, 0xb5, 0xb5, 0xe5, 0x1d, 0xbb, 0xe1, 0xf8, 0x3f, 0xb4, 0x53, 0x56, 0xa1,
	0x9e, 0x46, 0x5b, 0x33, 0xc3, 0x0c, 0x24, 0x14, 0xfc, 0x73, 0xa6, 0x04, 0xcf, 0x14, 0x3e, 0x86,
	0x96, 0x48, 0x78, 0xa6, 0x84, 0x9a, 0xea, 0xe4, 0x9d, 0xd0, 0xa7, 0x25, 0x63, 0x54, 0x03, 0x64,
	0x04, 0x2d, 0xe3, 0x2f, 0xf1, 0x09, 0xb4, 0xc6, 0xe6, 0x3b, 0x70, 0x77, 0xbc, 0x61, 0x27, 0x6c,
	0x51, 0x03, 0x46, 0x35, 0x42, 0x5e, 0x40, 0xf3, 0x24, 0x8f, 0x55, 0x5e, 0xdc, 0x8f, 0xe0, 0x39,
	0xf8, 0xa5, 0xbb, 0xc4, 0x47, 0xe0, 0x27, 0xe5, 0xa7, 0x49, 0xef, 0xd3, 0x12, 0x8a, 0x2a, 0x3b,
	0x19, 0x41, 0xfb, 0x82, 0xc7, 0xd7, 0x99, 0x88, 0x59, 0x76, 0xbf, 0xfc, 0xfb, 0x00, 0x75, 0x84,
	0xc4, 0x67, 0x00, 0xaa, 0x3e, 0x19, 0x16, 0xa0, 0xb5, 0x43, 0x64, 0xa1, 0xe4, 0xbb, 0x0b, 0x9d,
	0xb7, 0x3c, 0x11, 0x31, 0x4b, 0x2f, 0x7e, 0xf2, 0x92, 0x48, 0xc0, 0x37, 0x97, 0xd6, 0x6f, 0x60,
	0xab, 0x51, 0x01, 0xf8, 0x10, 0x9a, 0x65, 0xe9, 0xfa, 0x21, 0xac, 0x1b, 0x19, 0x33, 0x0e, 0xa1,
	0x5d, 0x53, 0x06, 0x2b, 0xda, 0xc7, 0xae, 0x67, 0x0e, 0xe2, 0x2e, 0xf8, 0x05, 0x97, 0x93, 0x54,
	0xc9, 0x60, 0x55, 0xd7, 0xfd, 0x1f, 0xb5, 0xaa, 0xa3, 0x51, 0x89, 0xbd, 0xce, 0x54, 0x31, 0x8d,
	0x2a, 0xcf, 0xc1, 0x01, 0x74, 0x6d, 0x00, 0xd7, 0xc0, 0xfb, 0xc4, 0xa7, 0xa6, 0xd3, 0x66, 0x9f,
	0xb8, 0x01, 0xab, 0xb7, 0x2c, 0x9d, 0x94, 0x7d, 0xe4, 0x46, 0xe5, 0xe1, 0xa0, 0xb1, 0xef, 0x92,
	0x10, 0xba, 0x16, 0x81, 0x44, 0x02, 0xab, 0x6a, 0xf6, 0x61, 0x64, 0xeb, 0xda, 0xf4, 0x51, 0x09,
	0x91, 0x43, 0x58, 0x3f, 0x15, 0xa9, 0xe2, 0xc5, 0xf1, 0xf4, 0x2c, 0xf9, 0xc5, 0x08, 0xe0, 0x00,
	0x5a, 0x57, 0xda, 0xe9, 0x2c, 0xd1, 0xac, 0x5e, 0x54, 0x9f, 0xc9, 0x37, 0x17, 0xfa, 0x47, 0x49,
	0xa2, 0x73, 0x9a, 0xf0, 0xcd, 0x5a, 0xc3, 0x32, 0x45, 0x25, 0x5d, 0xb0, 0xa8, 0xbf, 0x37, 0x57,
	0x7d, 0xcb, 0x16, 0xd5, 0xd3, 0x98, 0x25, 0xe4, 0xde, 0x5c, 0xc8, 0x15, 0x7d, 0x93, 0x2d, 0xba,
	0xc8, 0xf8, 0xf7, 0xb5, 0x0c, 0xa7, 0xd0, 0x37, 0xbd, 0xf1, 0x9e, 0x17, 0xb7, 0x22, 0xe6, 0xf8,
	0x0a, 0xd6, 0x0d, 0xdd, 0x51, 0x9a, 0x9a, 0xbc, 0xd8, 0xa3, 0xf6, 0xee, 0x18, 0xf4, 0x6c, 0x89,
	0x25, 0x71, 0x46, 0x2e, 0x8e, 0xe0, 0x5f, 0x83, 0x96, 0x9d, 0xce, 0xd2, 0x13, 0xa6, 0xd8, 0x72,
	0x60, 0xdd, 0x89, 0xc4, 0x09, 0xbf, 0xba, 0xd0, 0x2b, 0x9b, 0xae, 0xa2, 0x1e, 0x01, 0xce, 0xa9,
	0xeb, 0xe9, 0x5e, 0x4a, 0xd1, 0xae, 0x52, 0x48, 0xe2, 0xe0, 0x1e, 0x04, 0x15, 0xab, 0x31, 0x9e,
	0xe6, 0x85, 0x99, 0xf2, 0xdf, 0xc5, 0x1d, 0xc0, 0x86, 0xb1, 0x9b, 0x1b, 0x7e, 0x10, 0xea, 0xfa,
	0x2c, 0x41, 0xa4, 0x77, 0xba, 0x64, 0xb0, 0xd0, 0x4f, 0xc4, 0x09, 0xbf, 0xb8, 0xb0, 0x56, 0x0f,
	0x42, 0x55, 0xfa, 0x4b, 0x80, 0xa3, 0x24, 0xa9, 0xe4, 0xfa, 0x67, 0xe9, 0xe1, 0x06, 0x7d, 0xba,
	0xb0, 0x5b, 0x89, 0x83, 0x87, 0xb0, 0x7d, 0x47, 0xe6, 0xd3, 0xbc, 0x98, 0x2f, 0x91, 0x3f, 0x48,
	0x1e, 0x0a, 0xe8, 0x9d, 0x4f, 0x2e, 0x53, 0x11, 0x57, 0x25, 0x0c, 0xa1, 0xf3, 0x46, 0x48, 0x55,
	0x2d, 0xad, 0x3b, 0xca, 0x1b, 0x80, 0x38, 0x48, 0xa1, 0x3f, 0xf3, 0xb4, 0xd6, 0xcf, 0x92, 0x73,
	0x67, 0x3e, 0xe9, 0x92, 0x38, 0x97, 0x4d, 0xfd, 0x07, 0xd9, 0xfd, 0x11, 0x00, 0x00, 0xff, 0xff,
	0x27, 0x60, 0x90, 0x81, 0x53, 0x06, 0x00, 0x00,
}

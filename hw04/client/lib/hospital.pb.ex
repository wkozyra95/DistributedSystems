# Generated by `mix grpc.gen`.
# DO NOT EDIT!

defmodule Hospital.PatientService.Service do
  use GRPC.Service, name: "PatientService"

  rpc :RequestAllResults, Hospital.BasicRequest, stream(Hospital.MedicalTests)
  rpc :RequestPersonalData, Hospital.BasicRequest, Hospital.Patient
end

defmodule Hospital.PatientService.Stub do
  use GRPC.Stub, service: Hospital.PatientService.Service
end

defmodule Hospital.DoctorService.Service do
  use GRPC.Service, name: "DoctorService"

  rpc :RequestAllPatients, Hospital.BasicRequest, Hospital.Patients
  rpc :RequestPatientsForDoctor, Hospital.BasicRequest, Hospital.Patients
  rpc :RequestResultsWithId, Hospital.FilterByIdRequest, Hospital.MedicalTest
end

defmodule Hospital.DoctorService.Stub do
  use GRPC.Stub, service: Hospital.DoctorService.Service
end

defmodule Hospital.TechnicanService.Service do
  use GRPC.Service, name: "TechnicanService"

  rpc :AddResults, Hospital.AddTestRequest, Hospital.BasicResponse
  rpc :RequestAllResultsForTechnican, Hospital.BasicRequest, Hospital.MedicalTests
end

defmodule Hospital.TechnicanService.Stub do
  use GRPC.Stub, service: Hospital.TechnicanService.Service
end

defmodule Hospital.PublicService.Service do
  use GRPC.Service, name: "PublicService"

  rpc :ListDoctors, Hospital.BasicRequest, Hospital.Doctors
  rpc :ListTechnicans, Hospital.BasicRequest, Hospital.Technicans
end

defmodule Hospital.PublicService.Stub do
  use GRPC.Stub, service: Hospital.PublicService.Service
end

defmodule Hospital do
  use Protobuf, """
syntax = "proto3";

message BasicRequest {
  int64 id = 1;
}

message BasicResponse {
  string status = 1;
}

message Person {
  int64 id = 1;
  string first_name = 2;
  string last_name = 3;
}

message Patient {
  Person identity = 1;
}
message Patients {
  repeated Patient patients = 1;
}

message Doctor {
  Person identity = 1;
}

message Doctors {
  repeated Doctor doctors = 1;
}

message Technican {
  Person identity = 1;
}

message Technicans {
  repeated Technican technicans = 1;
}

message MedicalTest {
  int64 id = 1;
  Patient patient = 2;
  Doctor doctor = 3;
  Technican technican = 4;
  map<string, double> results = 5;
}

message MedicalTests {
  repeated MedicalTest tests = 1;
}

message FilterByIdRequest {
  int64 id = 1;
  int64 filterId = 2;
}

message AddTestRequest {
  int64 doctor = 1;
  int64 patient = 2;
  int64 technican = 3;
  map<string, double> results = 4;
}

service PatientService {
  rpc RequestAllResults (BasicRequest) returns (stream MedicalTests) {};
  rpc RequestPersonalData (BasicRequest) returns (Patient) {};
}

service DoctorService {
  rpc RequestAllPatients (BasicRequest) returns (Patients) {};
  rpc RequestPatientsForDoctor (BasicRequest) returns (Patients) {};
  rpc RequestResultsWithId (FilterByIdRequest) returns (MedicalTest) {};
}

service TechnicanService {
  rpc AddResults (AddTestRequest) returns (BasicResponse) {};
  rpc RequestAllResultsForTechnican (BasicRequest) returns (MedicalTests) {};
}

service PublicService {
  rpc ListDoctors (BasicRequest) returns (Doctors) {};
  rpc ListTechnicans (BasicRequest) returns (Technicans) {};
}


  """
end
